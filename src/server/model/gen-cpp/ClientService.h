/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientService_H
#define ClientService_H

#include <TProcessor.h>
#include "ClientServiceDefinition_types.h"

namespace junk {

class ClientServiceIf {
 public:
  virtual ~ClientServiceIf() {}
  virtual void move(const Vector2f& direction) = 0;
  virtual void changeDirection(const Vector2f& direction) = 0;
  virtual void fire(const Vector2f& direction) = 0;
};

class ClientServiceIfFactory {
 public:
  typedef ClientServiceIf Handler;

  virtual ~ClientServiceIfFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientServiceIf* /* handler */) = 0;
};

class ClientServiceIfSingletonFactory : virtual public ClientServiceIfFactory {
 public:
  ClientServiceIfSingletonFactory(const boost::shared_ptr<ClientServiceIf>& iface) : iface_(iface) {}
  virtual ~ClientServiceIfSingletonFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
};

class ClientServiceNull : virtual public ClientServiceIf {
 public:
  virtual ~ClientServiceNull() {}
  void move(const Vector2f& /* direction */) {
    return;
  }
  void changeDirection(const Vector2f& /* direction */) {
    return;
  }
  void fire(const Vector2f& /* direction */) {
    return;
  }
};

typedef struct _ClientService_move_args__isset {
  _ClientService_move_args__isset() : direction(false) {}
  bool direction;
} _ClientService_move_args__isset;

class ClientService_move_args {
 public:

  ClientService_move_args() {
  }

  virtual ~ClientService_move_args() throw() {}

  Vector2f direction;

  _ClientService_move_args__isset __isset;

  void __set_direction(const Vector2f& val) {
    direction = val;
  }

  bool operator == (const ClientService_move_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const ClientService_move_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_move_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_move_pargs {
 public:


  virtual ~ClientService_move_pargs() throw() {}

  const Vector2f* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_move_result {
 public:

  ClientService_move_result() {
  }

  virtual ~ClientService_move_result() throw() {}


  bool operator == (const ClientService_move_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_move_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_move_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_move_presult {
 public:


  virtual ~ClientService_move_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_changeDirection_args__isset {
  _ClientService_changeDirection_args__isset() : direction(false) {}
  bool direction;
} _ClientService_changeDirection_args__isset;

class ClientService_changeDirection_args {
 public:

  ClientService_changeDirection_args() {
  }

  virtual ~ClientService_changeDirection_args() throw() {}

  Vector2f direction;

  _ClientService_changeDirection_args__isset __isset;

  void __set_direction(const Vector2f& val) {
    direction = val;
  }

  bool operator == (const ClientService_changeDirection_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const ClientService_changeDirection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_changeDirection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_changeDirection_pargs {
 public:


  virtual ~ClientService_changeDirection_pargs() throw() {}

  const Vector2f* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_changeDirection_result {
 public:

  ClientService_changeDirection_result() {
  }

  virtual ~ClientService_changeDirection_result() throw() {}


  bool operator == (const ClientService_changeDirection_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_changeDirection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_changeDirection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_changeDirection_presult {
 public:


  virtual ~ClientService_changeDirection_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_fire_args__isset {
  _ClientService_fire_args__isset() : direction(false) {}
  bool direction;
} _ClientService_fire_args__isset;

class ClientService_fire_args {
 public:

  ClientService_fire_args() {
  }

  virtual ~ClientService_fire_args() throw() {}

  Vector2f direction;

  _ClientService_fire_args__isset __isset;

  void __set_direction(const Vector2f& val) {
    direction = val;
  }

  bool operator == (const ClientService_fire_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const ClientService_fire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_fire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_fire_pargs {
 public:


  virtual ~ClientService_fire_pargs() throw() {}

  const Vector2f* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_fire_result {
 public:

  ClientService_fire_result() {
  }

  virtual ~ClientService_fire_result() throw() {}


  bool operator == (const ClientService_fire_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_fire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_fire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_fire_presult {
 public:


  virtual ~ClientService_fire_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientServiceClient : virtual public ClientServiceIf {
 public:
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void move(const Vector2f& direction);
  void send_move(const Vector2f& direction);
  void recv_move();
  void changeDirection(const Vector2f& direction);
  void send_changeDirection(const Vector2f& direction);
  void recv_changeDirection();
  void fire(const Vector2f& direction);
  void send_fire(const Vector2f& direction);
  void recv_fire();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ClientServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_move(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDirection(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fire(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientServiceProcessor(boost::shared_ptr<ClientServiceIf> iface) :
    iface_(iface) {
    processMap_["move"] = &ClientServiceProcessor::process_move;
    processMap_["changeDirection"] = &ClientServiceProcessor::process_changeDirection;
    processMap_["fire"] = &ClientServiceProcessor::process_fire;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ClientServiceProcessor() {}
};

class ClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientServiceProcessorFactory(const ::boost::shared_ptr< ClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientServiceIfFactory > handlerFactory_;
};

class ClientServiceMultiface : virtual public ClientServiceIf {
 public:
  ClientServiceMultiface(std::vector<boost::shared_ptr<ClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientServiceIf> > ifaces_;
  ClientServiceMultiface() {}
  void add(boost::shared_ptr<ClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void move(const Vector2f& direction) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->move(direction);
    }
  }

  void changeDirection(const Vector2f& direction) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->changeDirection(direction);
    }
  }

  void fire(const Vector2f& direction) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->fire(direction);
    }
  }

};

} // namespace

#endif
