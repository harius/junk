/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ServiceDefinition_types.h"

#include <algorithm>

namespace junk
{

const char* Vector2f::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t Vector2f::binary_fingerprint[16] = {0xEA, 0x20, 0x86, 0xD2, 0xBB, 0x14, 0x22, 0x29, 0x91, 0xD7, 0xB0, 0x49, 0x7D, 0xE7, 0xB5, 0x8B};

uint32_t Vector2f::read(::apache::thrift::protocol::TProtocol* iprot)
{

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP)
    {
      break;
    }
    switch (fid)
    {
    case 1:
      if (ftype == ::apache::thrift::protocol::T_DOUBLE)
      {
        xfer += iprot->readDouble(this->x);
        this->__isset.x = true;
      }
      else
      {
        xfer += iprot->skip(ftype);
      }
      break;
    case 2:
      if (ftype == ::apache::thrift::protocol::T_DOUBLE)
      {
        xfer += iprot->readDouble(this->y);
        this->__isset.y = true;
      }
      else
      {
        xfer += iprot->skip(ftype);
      }
      break;
    default:
      xfer += iprot->skip(ftype);
      break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vector2f::write(::apache::thrift::protocol::TProtocol* oprot) const
{
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Vector2f");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Vector2f &a, Vector2f &b)
{
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

} // namespace
